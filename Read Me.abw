<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE abiword PUBLIC "-//ABISOURCE//DTD AWML 1.0 Strict//EN" "http://www.abisource.com/awml.dtd">
<abiword template="false" xmlns:ct="http://www.abisource.com/changetracking.dtd" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:math="http://www.w3.org/1998/Math/MathML" xid-max="233" xmlns:dc="http://purl.org/dc/elements/1.1/" styles="unlocked" fileformat="1.1" xmlns:svg="http://www.w3.org/2000/svg" xmlns:awml="http://www.abisource.com/awml.dtd" xmlns="http://www.abisource.com/awml.dtd" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.9.1" xml:space="preserve" props="dom-dir:ltr; document-footnote-restart-section:0; document-endnote-type:numeric; document-endnote-place-enddoc:1; document-endnote-initial:1; lang:es; document-endnote-restart-section:0; document-footnote-restart-page:0; document-footnote-type:numeric; document-footnote-initial:1; document-endnote-place-endsection:0">
<!-- ======================================================================== -->
<!-- This file is an AbiWord document.                                        -->
<!-- AbiWord is a free, Open Source word processor.                           -->
<!-- More information about AbiWord is available at http://www.abisource.com/ -->
<!-- You should not edit this file by hand.                                   -->
<!-- ======================================================================== -->

<metadata>
<m key="abiword.date_last_changed">Sun Sep  9 07:46:44 2018
</m>
<m key="abiword.generator">AbiWord</m>
<m key="dc.creator">Jonathan</m>
<m key="dc.date">Sun Sep  9 07:46:44 2018
</m>
<m key="dc.format">application/x-abiword</m>
</metadata>
<rdf>
</rdf>
<history version="1" edit-time="543" last-saved="1536500804" uid="8692c386-b435-11e8-8305-b13bd08145c2">
<version id="1" started="1536500804" uid="ca45d482-b436-11e8-8305-b13bd08145c2" auto="0" top-xid="233"/>
</history>
<styles>
<s type="P" name="Normal" followedby="Current Settings" props="font-family:Times New Roman; margin-top:0pt; color:000000; margin-left:0pt; text-position:normal; widows:2; font-style:normal; text-indent:0in; font-variant:normal; font-weight:normal; margin-right:0pt; font-size:12pt; text-decoration:none; margin-bottom:0pt; line-height:1.0; bgcolor:transparent; text-align:left; font-stretch:normal"/>
</styles>
<pagesize pagetype="A4" orientation="portrait" width="210.000000" height="297.000000" units="mm" page-scale="1.000000"/>
<section xid="113" props="page-margin-footer:0.5000in; page-margin-header:0.5000in; page-margin-right:1.0000in; page-margin-left:1.0000in; page-margin-top:1.0000in; page-margin-bottom:1.0000in">
<p style="Normal" xid="114" props="text-align:center"><c props="font-weight:bold; font-size:11pt">Codigo del cliente:</c></p>
<p style="Normal" xid="55"><c props="font-size:11pt"></c></p>
<p style="Normal" xid="56" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">import java.net .*;</c></p>
<p style="Normal" xid="57" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">import java.io.*;</c></p>
<p style="Normal" xid="58" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">import java.util.Scanner;</c></p>
<p style="Normal" xid="59" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt"></c></p>
<p style="Normal" xid="60" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">public class ClienteTCP{</c></p>
<p style="Normal" xid="61" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">	public static void main(String args[]){</c></p>
<p style="Normal" xid="62" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt"></c></p>
<p style="Normal" xid="63" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">		try{</c></p>
<p style="Normal" xid="64" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			int puerto = 5003;</c></p>
<p style="Normal" xid="65" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			Socket s = new Socket(args[0], puerto); //Ip destino y puerto Destino</c></p>
<p style="Normal" xid="66" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt"></c></p>
<p style="Normal" xid="67" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			Scanner leer = new Scanner( System.in ); //Objeto de tipo Scanner que ocupamos para leer los datos que ingresa el usuario</c></p>
<p style="Normal" xid="68" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			String name;</c></p>
<p style="Normal" xid="69" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt"></c></p>
<p style="Normal" xid="70" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			System.out.println("Ingrese el nombre del archivo que desea descargar: ");</c></p>
<p style="Normal" xid="71" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			name = leer.nextLine(); //Guardamos el nombre del archivo que el cliente quiere descargar</c></p>
<p style="Normal" xid="72" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt"></c></p>
<p style="Normal" xid="73" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			//Envia informacion</c></p>
<p style="Normal" xid="74" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			DataOutputStream salida = new DataOutputStream(s.getOutputStream());</c></p>
<p style="Normal" xid="75" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			salida.writeUTF(name);</c></p>
<p style="Normal" xid="76" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt"></c></p>
<p style="Normal" xid="77" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			DataInputStream entrada = new DataInputStream(s.getInputStream());</c></p>
<p style="Normal" xid="78" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			String datos = entrada.readUTF();</c></p>
<p style="Normal" xid="79" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt"></c></p>
<p style="Normal" xid="80" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			//Si el servidor nos dice que encontro el archivo</c></p>
<p style="Normal" xid="81" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			if(datos.equals("si")){ //Procedemos a descargar el archivo</c></p>
<p style="Normal" xid="82" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">				String a = "recibidos/";</c></p>
<p style="Normal" xid="83" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">				String b = a + name;</c></p>
<p style="Normal" xid="84" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">				byte[] contents = new byte[10000];</c></p>
<p style="Normal" xid="85" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">				FileOutputStream fos = new FileOutputStream(b);</c></p>
<p style="Normal" xid="86" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">				BufferedOutputStream bos = new BufferedOutputStream(fos);</c></p>
<p style="Normal" xid="87" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">				InputStream is = s.getInputStream();</c></p>
<p style="Normal" xid="88" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">				//No of bytes read in one read() call</c></p>
<p style="Normal" xid="89" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">				int bytesRead = 0;</c></p>
<p style="Normal" xid="90" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">				while((bytesRead=is.read(contents))!=-1)</c></p>
<p style="Normal" xid="91" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">				bos.write(contents, 0, bytesRead);</c></p>
<p style="Normal" xid="92" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">				bos.flush();</c></p>
<p style="Normal" xid="93" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">				System.out.println("Archivo recibido con exito");</c></p>
<p style="Normal" xid="94" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			}</c></p>
<p style="Normal" xid="95" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			//Si el archivo solicitado no existe en el servidor</c></p>
<p style="Normal" xid="96" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			else{</c></p>
<p style="Normal" xid="97" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">				System.out.println("Error al intentar descargar el archivo");</c></p>
<p style="Normal" xid="98" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			}</c></p>
<p style="Normal" xid="99" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">		</c></p>
<p style="Normal" xid="100" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			s.close();</c></p>
<p style="Normal" xid="101" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt"></c></p>
<p style="Normal" xid="102" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">		}catch(Exception e){</c></p>
<p style="Normal" xid="103" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			System.out.println("Socket: "+e.getMessage());</c></p>
<p style="Normal" xid="104" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">		}</c></p>
<p style="Normal" xid="105" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">		</c></p>
<p style="Normal" xid="106" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">	}</c></p>
<p style="Normal" xid="107" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">}</c></p>
<p style="Normal" xid="108" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt"></c></p>
<p style="Normal" xid="109" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt"></c></p>
<p style="Normal" xid="110" props="text-align:center; dom-dir:ltr"><c props="font-weight:bold; font-size:11pt">Codigo del servidor:</c></p>
<p style="Normal" xid="111" props="text-align:left; dom-dir:ltr"><c props="font-weight:normal; font-size:11pt"></c></p>
<p style="Normal" xid="112" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">import java.net.*;</c></p>
<p style="Normal" xid="115" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">import java.io.*;</c></p>
<p style="Normal" xid="116" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">import static java.util.concurrent.TimeUnit.NANOSECONDS;</c></p>
<p style="Normal" xid="117" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt"></c></p>
<p style="Normal" xid="118" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">public class servidor {</c></p>
<p style="Normal" xid="119" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">	public static void main(String args[]) {</c></p>
<p style="Normal" xid="120" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">		try {</c></p>
<p style="Normal" xid="121" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			int puertoServicio = 5003;</c></p>
<p style="Normal" xid="122" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			ServerSocket escuchandoSocket = new ServerSocket(puertoServicio);</c></p>
<p style="Normal" xid="123" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			while(true) {</c></p>
<p style="Normal" xid="124" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">				Socket socketCliente = escuchandoSocket.accept();</c></p>
<p style="Normal" xid="125" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">				Conexion c = new Conexion(socketCliente);</c></p>
<p style="Normal" xid="126" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			}</c></p>
<p style="Normal" xid="127" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			}</c></p>
<p style="Normal" xid="128" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			catch(Exception exc) {</c></p>
<p style="Normal" xid="129" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">				System.out.println(exc.getMessage());</c></p>
<p style="Normal" xid="130" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			}</c></p>
<p style="Normal" xid="131" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">		}</c></p>
<p style="Normal" xid="132" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">}</c></p>
<p style="Normal" xid="133" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">		class Conexion extends Thread {</c></p>
<p style="Normal" xid="134" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			DataInputStream entrada;</c></p>
<p style="Normal" xid="135" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			DataOutputStream salida;</c></p>
<p style="Normal" xid="136" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			Socket socketCliente;</c></p>
<p style="Normal" xid="137" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">	</c></p>
<p style="Normal" xid="138" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			public Conexion(Socket unSocketCliente) {</c></p>
<p style="Normal" xid="139" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">				try {</c></p>
<p style="Normal" xid="140" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					socketCliente = unSocketCliente;</c></p>
<p style="Normal" xid="141" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					entrada = new DataInputStream(socketCliente.getInputStream());</c></p>
<p style="Normal" xid="142" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					salida = new DataOutputStream(socketCliente.getOutputStream());</c></p>
<p style="Normal" xid="143" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					this.start();</c></p>
<p style="Normal" xid="144" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">				}</c></p>
<p style="Normal" xid="145" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">				catch(Exception exc) {</c></p>
<p style="Normal" xid="146" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					System.out.println(exc.getMessage());</c></p>
<p style="Normal" xid="147" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">				}</c></p>
<p style="Normal" xid="148" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			}</c></p>
<p style="Normal" xid="149" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			public void run() {</c></p>
<p style="Normal" xid="150" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">				try {</c></p>
<p style="Normal" xid="151" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					int a;</c></p>
<p style="Normal" xid="152" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					String datos = entrada.readUTF();</c></p>
<p style="Normal" xid="153" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">		</c></p>
<p style="Normal" xid="154" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					a = busqueda(datos); //Mandamos a llamar al metodo que se encarga de buscar si el archivo solicitado por el cliente existe o no.</c></p>
<p style="Normal" xid="155" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">				</c></p>
<p style="Normal" xid="156" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					 //Si el metodo devuelve 1 quiere decir que el archivo si existe</c></p>
<p style="Normal" xid="157" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					if(a==1) {</c></p>
<p style="Normal" xid="158" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">						salida.writeUTF("si");</c></p>
<p style="Normal" xid="159" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">						String ac = "archivos/";</c></p>
<p style="Normal" xid="160" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">						String b = ac+datos;</c></p>
<p style="Normal" xid="161" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">						File file = new File(b);</c></p>
<p style="Normal" xid="162" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">						FileInputStream fis = new FileInputStream(file);</c></p>
<p style="Normal" xid="163" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">						BufferedInputStream bis = new BufferedInputStream(fis);</c></p>
<p style="Normal" xid="164" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">				</c></p>
<p style="Normal" xid="165" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">						OutputStream os = socketCliente.getOutputStream();</c></p>
<p style="Normal" xid="166" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">						//Read File Contents into contents array</c></p>
<p style="Normal" xid="167" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">						byte[] contents;</c></p>
<p style="Normal" xid="168" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">						long fileLength = file.length();</c></p>
<p style="Normal" xid="169" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">						long current = 0;</c></p>
<p style="Normal" xid="170" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">						long start = System.nanoTime();</c></p>
<p style="Normal" xid="171" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">						while(current!=fileLength){</c></p>
<p style="Normal" xid="172" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">							int size = 10000;</c></p>
<p style="Normal" xid="173" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">							if(fileLength - current &gt;= size)</c></p>
<p style="Normal" xid="174" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">								current += size;</c></p>
<p style="Normal" xid="175" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">							else{</c></p>
<p style="Normal" xid="176" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">								size = (int)(fileLength - current);</c></p>
<p style="Normal" xid="177" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">								current = fileLength;</c></p>
<p style="Normal" xid="178" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">							}</c></p>
<p style="Normal" xid="179" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">							contents = new byte[size];</c></p>
<p style="Normal" xid="180" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">							bis.read(contents, 0, size);</c></p>
<p style="Normal" xid="181" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">							os.write(contents);</c></p>
<p style="Normal" xid="182" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">							System.out.println("Sending file ... "+(current*100)/fileLength+"% completed!");</c></p>
<p style="Normal" xid="183" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">						}</c></p>
<p style="Normal" xid="184" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">						os.flush();</c></p>
<p style="Normal" xid="185" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					}</c></p>
<p style="Normal" xid="186" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			</c></p>
<p style="Normal" xid="187" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					//De lo contrario, mostramos un mensaje diciendo que el archivo no existe</c></p>
<p style="Normal" xid="188" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					else {</c></p>
<p style="Normal" xid="189" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">						salida.writeUTF("no");</c></p>
<p style="Normal" xid="190" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">						System.out.println("El archivo solicitado no existe");</c></p>
<p style="Normal" xid="191" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">						</c></p>
<p style="Normal" xid="192" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					}</c></p>
<p style="Normal" xid="193" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					socketCliente.close();</c></p>
<p style="Normal" xid="194" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">				}</c></p>
<p style="Normal" xid="195" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">				catch(Exception exc) {</c></p>
<p style="Normal" xid="196" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					System.out.println(exc.getMessage());</c></p>
<p style="Normal" xid="197" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					}</c></p>
<p style="Normal" xid="198" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			}</c></p>
<p style="Normal" xid="199" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt"></c></p>
<p style="Normal" xid="200" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			public static int busqueda(String archivo){</c></p>
<p style="Normal" xid="201" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					String files;</c></p>
<p style="Normal" xid="202" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			</c></p>
<p style="Normal" xid="203" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					//Creamos un archivo file y le pasamos la direccion de donde buscara los archivos solicitados por los clientes</c></p>
<p style="Normal" xid="204" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					File file = new File("archivos");</c></p>
<p style="Normal" xid="205" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			</c></p>
<p style="Normal" xid="206" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					//Creamos un array de archivos para almacenar todos los archivos existentes en la carpeta especifica</c></p>
<p style="Normal" xid="207" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					File[] list = file.listFiles();</c></p>
<p style="Normal" xid="208" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			</c></p>
<p style="Normal" xid="209" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					//Hacemos un for para recorrer todos los archivos que se encuentran en la carpeta</c></p>
<p style="Normal" xid="210" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					for(int i=0; i&lt;list.length; i++){</c></p>
<p style="Normal" xid="211" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">						if(list[i].isFile()){</c></p>
<p style="Normal" xid="212" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">							files =list[i].getName();</c></p>
<p style="Normal" xid="213" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			</c></p>
<p style="Normal" xid="214" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">							//Comparamos los archivos existentes con el que el cliente desea descargar</c></p>
<p style="Normal" xid="215" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">							if(archivo.equals(files)){</c></p>
<p style="Normal" xid="216" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			</c></p>
<p style="Normal" xid="217" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">								//Si el archivo existe retornamos 1 y terminamos el metodo porque ya encontramos el archivo que el cliente desea</c></p>
<p style="Normal" xid="218" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">								return 1;</c></p>
<p style="Normal" xid="219" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">							}</c></p>
<p style="Normal" xid="220" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">						}</c></p>
<p style="Normal" xid="221" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					}</c></p>
<p style="Normal" xid="222" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					</c></p>
<p style="Normal" xid="223" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					//Si no se encuentra el archivo que el cliente desea, retornamos 0</c></p>
<p style="Normal" xid="224" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">					return 0;</c></p>
<p style="Normal" xid="225" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">			}</c></p>
<p style="Normal" xid="226" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt"></c></p>
<p style="Normal" xid="227" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt"></c></p>
<p style="Normal" xid="228" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">	}</c></p>
<p style="Normal" xid="229" props="text-align:center; dom-dir:ltr"><c props="font-weight:bold; font-size:11pt">Bibliografias:</c></p>
<p style="Normal" xid="231" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">http://www.it.uc3m.es/celeste/docencia/cr/2003/PracticaSocketsTCP/programacionextrema.com</c></p>
<p style="Normal" xid="233" props="text-align:left; dom-dir:ltr"><c></c></p>
<p style="Normal" xid="232" props="text-align:left; dom-dir:ltr"><c props="font-size:11pt">https://es.stackoverflow.com</c></p>
</section>
</abiword>
